<!DOCTYPE html>
<html>
<head>
    <title>Number Operations</title>
</head>
<body>
    <h2>Number Operations</h2>
    <form method="post" action="<?php echo $_SERVER['PHP_SELF']; ?>">
        <label for="number">Enter a number:</label>
        <input type="number" name="number" id="number" required>
        <br><br>
        <input type="submit" name="submit" value="Submit">
    </form>
    <br>

    <?php
    // Function to generate the Fibonacci series
    function generateFibonacci($n)
    {
        $fibonacciSeries = [];
        $fibonacciSeries[0] = 0;
        $fibonacciSeries[1] = 1;

        for ($i = 2; $i < $n; $i++) {
            $fibonacciSeries[$i] = $fibonacciSeries[$i - 1] + $fibonacciSeries[$i - 2];
        }

        return $fibonacciSeries;
    }

    // Function to find the sum of digits of a number
    function sumOfDigits($number)
    {
        $sum = 0;

        while ($number != 0) {
            $sum += $number % 10;
            $number = (int)($number / 10);
        }

        return $sum;
    }

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $number = $_POST['number'];

        // Generate the Fibonacci series
        $fibonacciSeries = generateFibonacci($number);
        echo "Fibonacci Series: " . implode(', ', $fibonacciSeries) . "<br>";

        // Find the sum of digits of the entered number
        $sum = sumOfDigits($number);
        echo "Sum of Digits: " . $sum . "<br>";
    }
    ?>

</body>
</html>

/*------------------------------------------------*/
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# Load the dataset
df = pd.read_csv('student_scores.csv')

# Split features and target variable
X = df[['Hours']]
y = df['Pass']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Build and train the logistic regression model
model = LogisticRegression()
model.fit(X_train, y_train)

# Make predictions on the testing set
y_pred = model.predict(X_test)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)
